<?php

/**
 * This file is part of the eZ RepositoryForms package.
 *
 * @copyright Copyright (C) eZ Systems AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 *
 * @version //autogentag//
 */
namespace EzSystems\RepositoryForms\Validator\Constraints;

use eZ\Publish\API\Repository\FieldTypeService;
use eZ\Publish\API\Repository\Values\Translation\Plural;
use Symfony\Component\Validator\ConstraintValidator;

abstract class FieldTypeValidator extends ConstraintValidator
{
    /**
     * @var FieldTypeService
     */
    protected $fieldTypeService;

    public function __construct(FieldTypeService $fieldTypeService)
    {
        $this->fieldTypeService = $fieldTypeService;
    }

    /**
     * @param \eZ\Publish\SPI\FieldType\ValidationError[] $validationErrors
     */
    protected function processValidationErrors(array $validationErrors)
    {
        if (empty($validationErrors)) {
            return;
        }

        foreach ($validationErrors as $i => $error) {
            $message = $error->getTranslatableMessage();
            /** @var \Symfony\Component\Validator\Violation\ConstraintViolationBuilderInterface $violationBuilder */
            $violationBuilder = $this->context->buildViolation($message instanceof Plural ? $message->plural : $message->message);
            $violationBuilder->setParameters($message->values);

            $propertyPath = $this->generatePropertyPath($i, $error->getTarget());
            if ($propertyPath) {
                $violationBuilder->atPath($propertyPath);
            }

            $violationBuilder->addViolation();
        }
    }

    /**
     * Generates the property path an error is meant to.
     * This property path depends on the error target and on the object being validated.
     *
     * Example: "validatorConfiguration[StringLengthValidator][minStringLength]"
     * Defaults to an empty string.
     *
     * @param int $errorIndex Index in the error stack (0 indexed).
     * @param string $errorTarget Error target, generated by API/SPI.
     *
     * @return string
     */
    protected function generatePropertyPath($errorIndex, $errorTarget)
    {
        return '';
    }
}
